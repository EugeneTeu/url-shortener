{"version":3,"sources":["api/url.ts","components/UrlForm.tsx","context/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createShortenedUrl","a","url","fetch","method","headers","body","JSON","stringify","response","ok","json","message","Error","result","Title","Typography","UrlForm","Form","useForm","form","useState","undefined","shortenedUrl","setShortenedUrl","onFinish","values","console","log","notification","error","layout","Item","name","label","hasFeedback","rules","required","getFieldValue","validator","_","value","URL","Promise","resolve","reject","type","htmlType","style","marginRight","onClick","resetFields","title","bordered","level","AuthContext","createContext","ContextProvider","children","Provider","Homepage","className","CodepenCircleFilled","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"0VAKaA,EAAkB,uCAAG,qCAAAC,EAAA,6DAASC,EAAT,EAASA,IAAT,SACTC,MAHR,OAGwB,CACrCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEN,UANO,WAC1BO,EAD0B,QAQlBC,GARkB,iCASHD,EAASE,OATN,sBAStBC,EATsB,EAStBA,QACF,IAAIC,MAAMD,GAVc,yBAYkBH,EAASE,OAZ3B,eAY1BG,EAZ0B,yBAazBA,GAbyB,4CAAH,sDCFvBC,EAAUC,IAAVD,MAEKE,EAAwB,WACnC,MAAeC,IAAKC,UAAbC,EAAP,oBACA,EAAwCC,wBACtCC,GADF,mBAAOC,EAAP,KAAqBC,EAArB,KAIMC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAzB,EAAA,+EAESD,EAAmB0B,GAF5B,gBAELxB,EAFK,EAELA,IACRsB,EAAgBtB,GAHH,gDAKbyB,QAAQC,IAAR,MACAC,IAAaC,MAAM,CAAElB,QAAS,sDANjB,yDAAH,sDAed,OACE,oCACE,kBAAC,IAAD,CAAMmB,OAAO,WAAWX,KAAMA,EAAMK,SAAUA,GAC5C,kBAAC,IAAKO,KAAN,CACEC,KAAK,MACLC,MAAM,iBACNC,aAAW,EACXC,MAAO,CACL,CAAEC,UAAU,GACZ,cAAGC,cAAH,MAAwB,CACtBC,UADsB,SACZC,EAAGC,GAEX,IACQ,IAAIC,IAAID,GACd,MAAOD,GACPC,OAAQnB,EAEV,OAAImB,EACKE,QAAQC,UAEVD,QAAQE,OACb,IAAIhC,MAAM,2CAMlB,kBAAC,IAAD,OAEF,kBAAC,IAAKmB,KAAN,KACE,kBAAC,IAAD,CACEc,KAAK,UACLC,SAAS,SACTC,MAAO,CAAEC,YAAa,SAHxB,UAOA,kBAAC,IAAD,CAAQF,SAAS,SAASG,QA1ClB,WACd9B,EAAK+B,cACL3B,OAAgBF,KAwCV,WAKJ,6BACA,kBAAC,IAAD,CAAM8B,MAAM,gBAAgBC,UAAU,GACpC,kBAACtC,EAAD,CAAOuC,MAAO,GAAI/B,EAAlB,QC7DFgC,EAAcC,wBAAkB,IAGzBC,EAAqD,SAAC,GAE5D,IADLC,EACI,EADJA,SAEA,OAAO,kBAACH,EAAYI,SAAb,CAAsBlB,MAAO,IAAKiB,I,iBCUrCE,EAAe,WACnB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,kBAACC,EAAA,EAAD,CAAqBD,UAAU,cAFnC,wBAIuB,6BAJvB,sBAOA,yBAAKA,UAAU,cACb,2CACA,kBAAC,IAAD,MACA,kBAAC,EAAD,SAMOE,EApCC,WACd,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,8CAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCLQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAClD,GACNH,QAAQG,MAAMA,EAAMlB,c","file":"static/js/main.0d870003.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { CreateShortenedUrlResponse, ErrorResponse } from \"./types\";\n\nconst BASE_API = \"/url\";\n\nexport const createShortenedUrl = async ({ url }: { url: string }) => {\n  const response = await fetch(BASE_API, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ url }),\n  });\n  if (!response.ok) {\n    const { message } = (await response.json()) as ErrorResponse;\n    throw new Error(message);\n  }\n  const result: CreateShortenedUrlResponse = (await response.json()) as CreateShortenedUrlResponse;\n  return result;\n};\n","import React, { useState } from \"react\";\nimport { Input, Form, Button, notification, Typography, Card } from \"antd\";\nimport { createShortenedUrl } from \"../api\";\nconst { Title } = Typography;\n\nexport const UrlForm: React.FC<{}> = () => {\n  const [form] = Form.useForm();\n  const [shortenedUrl, setShortenedUrl] = useState<string | undefined>(\n    undefined\n  );\n\n  const onFinish = async (values: any) => {\n    try {\n      const { url } = await createShortenedUrl(values);\n      setShortenedUrl(url);\n    } catch (e) {\n      console.log(e);\n      notification.error({ message: <p>Something went wrong!</p> });\n    }\n  };\n\n  const onReset = () => {\n    form.resetFields();\n    setShortenedUrl(undefined);\n  };\n\n  return (\n    <>\n      <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n        <Form.Item\n          name=\"url\"\n          label=\"Enter Url Here\"\n          hasFeedback\n          rules={[\n            { required: true },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                let url;\n                try {\n                  url = new URL(value);\n                } catch (_) {\n                  value = undefined;\n                }\n                if (value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject(\n                  new Error(\"input provided is not a valid URL\")\n                );\n              },\n            }),\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{ marginRight: \"1rem\" }}\n          >\n            Submit\n          </Button>\n          <Button htmlType=\"button\" onClick={onReset}>\n            Reset\n          </Button>\n        </Form.Item>\n      </Form>\n      <br/>\n      <Card title=\"Shortened URL\" bordered={false}>\n        <Title level={3}>{shortenedUrl} </Title>\n      </Card>\n    </>\n  );\n};\n","import React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  FC,\n  Children,\n} from \"react\";\n\nconst AuthContext = createContext<{}>({});\n\n// provider pattern to extend context\nexport const ContextProvider: FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  return <AuthContext.Provider value={{}}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): {} => {\n  return useContext<{}>(AuthContext);\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Divider, Card, Tabs, Input } from \"antd\";\nimport { CodepenCircleFilled } from \"@ant-design/icons\";\nimport { UrlForm } from \"./components\";\nimport { ContextProvider } from \"./context\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst App: FC = () => {\n  return (\n    <ContextProvider>\n      <Router>\n        <Switch>\n          <Route path=\"/other\">\n            <>other</>\n          </Route>\n          <Route path=\"/\">\n            <Homepage />\n          </Route>\n        </Switch>\n      </Router>\n    </ContextProvider>\n  );\n};\n\nconst Homepage: FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div >\n          <CodepenCircleFilled className=\"App-logo\"/>\n        </div>\n        Govtech URL shortener<br></br>\n        Eugene Teu Chu Wei\n      </header>\n      <div className=\"background\">\n        <h1>Information</h1>\n        <Divider />\n        <UrlForm />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}